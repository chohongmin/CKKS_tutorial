#include <stdio.h>

void convert_poly_to_binarytreeform(double* c, int N){
	if(N==2) return;
	for(int i=0;i<N/2;i++){
		c[i]-=c[N/2+i];
		c[N/2+i]*=2;
	}
	convert_poly_to_binarytreeform(c    ,N/2);
	convert_poly_to_binarytreeform(c+N/2,N/2);
}

int main(){
	//---------------------------------------------------------------------
	// p(x)=sum(c[i]*T_i(x/4),i,0,N-1) is a polynomial approximation of
	// EvalMod(x)=sin(%pi*x)/%pi on [-4.1,4.1] with error bound 6*10^{-11}
	//---------------------------------------------------------------------
	const int N=32;
	double c[]={-0.00000000000000006222, -0.06063360091149352232, 0.00000000000000003685, -0.01875769031724810673, 0.00000000000000013699, 0.07042104737905452438, 0.00000000000000002475, 0.15325415898873887000, 0.00000000000000003424, 0.05678290124279305323, 0.00000000000000013597, -0.18701806119803734973, 0.00000000000000009014, 0.11560309312855267250, 0.00000000000000005636, -0.03860211433208281945, -0.00000000000000006950, 0.00852823130398045436, 0.00000000000000003181, -0.00136784311399695802, 0.00000000000000005313, 0.00016828870256527099, 0.00000000000000001705, -0.00001648367419323531, 0.00000000000000002977, 0.00000132070172342996, 0.00000000000000003907, -0.00000008837849007908, 0.00000000000000011476, 0.00000000502203879710, 0.00000000000000000667, -0.0000000002};

	//---------------------------------------------------------------------
	// convert the coefficients to the binary-tree evaluation form
	//--------------------------------------------------------------------
	convert_poly_to_binarytreeform(c,N);
	printf("c=[");
	for(int i=0;i<N;i++){
		if(i<N-1) printf("%1.20e, "  , c[i]);
		else      printf("%1.20e];\n", c[i]);
	}

	//-----------------------------------------------------------------------
	// this code will print out
	//
	// c=[-5.58000000000000143151e-17, -5.83484521478001838535e-02, 
	//    -9.97399999999999946710e-17, -4.44892623574376089302e-02, 
	//     3.00940000000000014920e-16, -4.74446172450079084459e-01, 
	//    -1.67960000000000021476e-16,  7.67491027180059681712e-01, 
	//    -3.62399999999999858910e-17,  1.79188702244040432010e-01, 
	//     1.88839999999999953514e-16, -5.93663434749857832351e-01, 
	//    -2.97239999999999974519e-16,  6.16820808954386734513e-01, 
	//     3.97520000000000047976e-16, -3.08816913056662534220e-01, 
	//    -4.00000000000000090247e-17,  1.94197963660883883563e-02, 
	//    -7.05600000000000066504e-17, -5.40508504525457483814e-03, 
	//    -2.88039999999999943354e-16,  7.39068618878836692751e-04, 
	//     8.30400000000000141993e-17, -1.31867793545882463872e-04, 
	//    -4.69559999999999982040e-16,  5.61543269884775999700e-06, 
	//     2.59200000000000001287e-16, -7.05427920632640024149e-07, 
	//     8.64719999999999879255e-16,  4.17763103768000018460e-08, 
	//     1.06719999999999999130e-16, -3.20000000000000011658e-09];
	//------------------------------------------------------------------------
}